{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM8mNJp2FXmpSazK8v1CiLR",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/xXCrIs7xDXx/BootStraps-Project/blob/master/Proyectos%20Cobol\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6lk_6bo-MeSz",
        "outputId": "9b8a66d3-f86c-40d4-996e-b1bde154c77a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "empieza hilo 0\n",
            "\n",
            "empieza hilo 1\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Process Process-24:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            "empieza hilo 2\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Process Process-25:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "empieza hilo 3\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Traceback (most recent call last):\n",
            "Process Process-27:\n",
            "Traceback (most recent call last):\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Traceback (most recent call last):\n",
            "  File \"/usr/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n",
            "    self.run()\n",
            "  File \"/usr/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n",
            "    self.run()\n",
            "Process Process-26:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "empieza hilo 4\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "  File \"/usr/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n",
            "    self.run()\n",
            "  File \"/usr/lib/python3.12/multiprocessing/process.py\", line 108, in run\n",
            "    self._target(*self._args, **self._kwargs)\n",
            "  File \"/usr/lib/python3.12/multiprocessing/process.py\", line 108, in run\n",
            "    self._target(*self._args, **self._kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "  File \"/usr/lib/python3.12/multiprocessing/process.py\", line 108, in run\n",
            "    self._target(*self._args, **self._kwargs)\n",
            "Process Process-28:\n",
            "  File \"/tmp/ipython-input-2883402376.py\", line 6, in tarea\n",
            "    if nombre%2==0:\n",
            "       ~~~~~~^~\n",
            "Traceback (most recent call last):\n",
            "  File \"/tmp/ipython-input-2883402376.py\", line 6, in tarea\n",
            "    if nombre%2==0:\n",
            "       ~~~~~~^~\n",
            "TypeError: not all arguments converted during string formatting\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n",
            "    self.run()\n",
            "  File \"/usr/lib/python3.12/multiprocessing/process.py\", line 108, in run\n",
            "    self._target(*self._args, **self._kwargs)\n",
            "  File \"/tmp/ipython-input-2883402376.py\", line 6, in tarea\n",
            "    if nombre%2==0:\n",
            "       ~~~~~~^~\n",
            "  File \"/usr/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n",
            "    self.run()\n",
            "  File \"/tmp/ipython-input-2883402376.py\", line 6, in tarea\n",
            "    if nombre%2==0:\n",
            "       ~~~~~~^~\n",
            "TypeError: not all arguments converted during string formatting\n",
            "  File \"/usr/lib/python3.12/multiprocessing/process.py\", line 108, in run\n",
            "    self._target(*self._args, **self._kwargs)\n",
            "TypeError: not all arguments converted during string formatting\n",
            "  File \"/tmp/ipython-input-2883402376.py\", line 6, in tarea\n",
            "    if nombre%2==0:\n",
            "       ~~~~~~^~\n",
            "TypeError: not all arguments converted during string formatting\n",
            "TypeError: not all arguments converted during string formatting\n"
          ]
        }
      ],
      "source": [
        "import multiprocessing as mp\n",
        "import time\n",
        "\n",
        "def tarea(nombre):\n",
        "  print(\"empieza hilo \"+str(nombre)+\"\\n\")\n",
        "  if nombre%2==0:\n",
        "    time.sleep(2)\n",
        "  else:\n",
        "    time.sleep(1)\n",
        "  print(\"termina hilo \"+str(nombre)+\"\\n\")\n",
        "\n",
        "if __name__==\"__main__\":\n",
        "  procesos = []\n",
        "  for i in range(5):\n",
        "    p=mp.Process(target=tarea,args=(str(i,)))\n",
        "    procesos.append(p)\n",
        "\n",
        "  for hilo in procesos:\n",
        "    hilo.start()\n",
        "\n",
        "  for hilo in procesos:\n",
        "    hilo.join()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import multiprocessing as mp\n",
        "import time\n",
        "\n",
        "datos = [1,2,3,4,5]\n",
        "datos2= [];\n",
        "\n",
        "for i in datos:\n",
        "  datos2.append(i**2)\n",
        "\n",
        "print(datos2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E84DcNhAPlO9",
        "outputId": "c38fffee-286c-4ff1-f1e7-a9734d381d2e"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 4, 9, 16, 25]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import multiprocessing as mp\n",
        "from multiprocessing import Pool\n",
        "import time\n",
        "\n",
        "def cuadrado(n):\n",
        "  return n*n\n",
        "if __name__== '__main__':\n",
        "  pool = Pool()\n",
        "  datos2=pool.map(cuadrado, datos)\n",
        "  pool.close()\n",
        "  print(datos2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bqwFQ5nZP_NT",
        "outputId": "720ac255-bf75-457f-f24c-60d3f30c1a94"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 4, 9, 16, 25]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def fibo(n):\n",
        "  if n==0:\n",
        "    return 0\n",
        "  elif n==1:\n",
        "    return 1\n",
        "  else:\n",
        "    return fibo(n-1)+fibo(n-2)\n",
        "if __name__=='__main__':\n",
        "  datos=[fibo(i)for i in range(1,50,2)]\n",
        "  print(datos)"
      ],
      "metadata": {
        "id": "3nnEGme1SjbV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def fibo(n):\n",
        "  if n==0:\n",
        "    return 0\n",
        "  elif n==1:\n",
        "    return 1\n",
        "  else:\n",
        "    return fibo(n-1)+fibo(n-2)\n",
        "if __name__=='__main__':\n",
        "  pool = Pool()\n",
        "  datos=[i for i in range(1,35,2)]\n",
        "  datos2=pool.map(fibo, datos)\n",
        "  pool.close()\n",
        "  print(datos2)"
      ],
      "metadata": {
        "id": "dETuyQnGTZe3"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}